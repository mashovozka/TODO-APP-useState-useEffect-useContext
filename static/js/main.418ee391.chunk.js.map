{"version":3,"sources":["hooks/useLocalStorageState.js","reducer/todo.reducer.js","context/todos.context.js","hooks/useLocalStorageReducer.js","hooks/useInputState.js","EditTodoForm.js","hooks/useToggleState.js","Todo.js","TodoList.js","TodoForm.js","TodoApp.js","App.js","serviceWorker.js","index.js"],"names":["useLocalStorageState","reducer","state","action","type","id","uuid","task","completed","filter","todo","map","newTask","defaultTodos","TodosContext","createContext","DispatchContext","TodosProvider","props","key","defaultVal","useReducer","val","JSON","parse","window","localStorage","getItem","String","e","dispatch","useEffect","setItem","stringify","useLocalStorageReducer","todoReducer","todos","Provider","value","children","initialVal","useState","setValue","target","EditTodoForm","toggle","useContext","useInputState","handleChange","reset","onSubmit","preventDefault","style","marginLeft","width","TextField","margin","onChange","fullWidth","autoFocus","useToggle","setState","memo","useToggleState","isEditing","ListItem","height","Checkbox","tabIndex","onClick","checked","ListItemText","textDecoration","ListItemSecondaryAction","IconButton","aria-label","TodoList","length","Paper","List","i","Divider","TodoForm","padding","label","TodoApp","backgroundColor","elevation","AppBar","color","position","Toolbar","Typography","Grid","container","justify","marginTop","item","xs","md","lg","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4RAqBeA,I,2CCpBf,IAgBeC,EAhBC,SAACC,EAAOC,GACpB,OAAOA,EAAOC,MACR,QACM,OAAOF,EACf,IAAK,MACD,MAAM,GAAN,mBAAWA,GAAX,CAAkB,CAACG,GAAIC,MAAQC,KAAMJ,EAAOI,KAAMC,WAAW,KACjE,IAAK,SACD,OAAQN,EAAMO,QAAO,SAAAC,GAAI,OAAIA,EAAKL,KAAOF,EAAOE,MACpD,IAAK,SACD,OAAOH,EAAMS,KAAI,SAAAD,GAAI,OAAIA,EAAKL,KAAOF,EAAOE,GAAnB,eACjBK,EADiB,CACXF,WAAYE,EAAKF,YAAaE,KAChD,IAAK,OACD,OAAOR,EAAMS,KAAI,SAAAD,GAAI,OACjBA,EAAKL,KAAOF,EAAOE,GAAnB,eAA4BK,EAA5B,CAAkCH,KAAMJ,EAAOS,UAAWF,OCVpEG,EAAe,CACjB,CAACR,GAAI,EAAGE,KAAM,mBAAoBC,WAAW,GAC7C,CAACH,GAAI,EAAGE,KAAM,mBAAoBC,WAAW,IAMpCM,EAAeC,0BACfC,EAAkBD,0BAExB,SAASE,EAAeC,GAAO,IAAD,ECbrC,SAAgCC,EAAKC,EAAYnB,GAAS,IAAD,EAE3BoB,qBAAWpB,EAASmB,GAAY,WACtD,IAAIE,EACJ,IACAA,EAAMC,KAAKC,MAAMC,OAAOC,aAAaC,QAAQR,IAAQS,OAAOR,IAE5D,MAAOS,GACPP,EAAMF,EAEN,OAAOE,KAV0C,mBAE9CpB,EAF8C,KAEvC4B,EAFuC,KAkBrD,OAJAC,qBAAU,WACNN,OAAOC,aAAaM,QAAQb,EAAKI,KAAKU,UAAU/B,MACjD,CAACA,IAEG,CAACA,EAAO4B,GDJQI,CACtB,QAASrB,EAAcsB,GAFS,mBAC7BC,EAD6B,KACtBN,EADsB,KAIjC,OACI,kBAAChB,EAAauB,SAAd,CAAuBC,MAAOF,GAC5B,kBAACpB,EAAgBqB,SAAjB,CAA0BC,MAAOR,GAC9BZ,EAAMqB,WErBJ,eAAAC,GAAe,IAAD,EACCC,mBAASD,GADV,mBAClBF,EADkB,KACXI,EADW,KAQzB,MAAO,CAACJ,EANa,SAAAT,GACjBa,EAASb,EAAEc,OAAOL,QAER,WACVI,EAAS,O,SCoBFE,MAtBf,YAA0C,IAAnBrC,EAAkB,EAAlBA,KAAMF,EAAY,EAAZA,GAAIwC,EAAQ,EAARA,OACvBf,EAAWgB,qBAAW9B,GADS,EAEA+B,EAAcxC,GAFd,mBAE9B+B,EAF8B,KAEvBU,EAFuB,KAETC,EAFS,KAGzC,OACM,0BAAMC,SAAU,SAAArB,GACZA,EAAEsB,iBACFrB,EAAS,CAAC1B,KAAM,OAAQC,GAAIA,EAAIO,QAAS0B,IACzCW,IACAJ,KAEJO,MAAO,CAACC,WAAY,OAAQC,MAAO,SAEnC,kBAACC,EAAA,EAAD,CACAC,OAAO,SACPlB,MAAOA,EACPmB,SAAUT,EACVU,WAAS,EACTC,WAAS,MCdAC,MAPf,WAAuC,IAApBpB,EAAmB,0DACRC,mBAASD,GADD,mBAC3BtC,EAD2B,KACpB2D,EADoB,KAE5BhB,EAAS,WACXgB,GAAU3D,IAEd,MAAO,CAACA,EAAO2C,I,+EC6CJiB,sBAvCf,YAAsC,IAAvBzD,EAAsB,EAAtBA,GAAIE,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,UACfsB,EAAWgB,qBAAW9B,GADK,EAEL+C,GAAe,GAFV,mBAE1BC,EAF0B,KAEfnB,EAFe,KAGjC,OACI,kBAACoB,EAAA,EAAD,CAAUb,MAAO,CAACc,OAAQ,SACrBF,EACD,kBAAC,EAAD,CACC3D,GAAIA,EACJE,KAAMA,EACNsC,OAAQA,IAGT,oCACA,kBAACsB,EAAA,EAAD,CACAC,UAAW,EACXC,QAAS,kBAAMvC,EAAS,CAAC1B,KAAM,SAAUC,GAAIA,KAC7CiE,QAAS9D,IACb,kBAAC+D,EAAA,EAAD,CACAnB,MAAO,CAACoB,eAAgBhE,EAAY,eAAiB,SAEjDD,GAEJ,kBAACkE,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CACAC,aAAW,SACXN,QAAS,kBAAMvC,EAAS,CAAC1B,KAAM,SAAUC,GAAIA,MAEzC,kBAAC,IAAD,OAEJ,kBAACqE,EAAA,EAAD,CAAYC,aAAW,OAAON,QAASxB,GAEnC,kBAAC,IAAD,aCfD+B,MApBf,WACA,IAAMxC,EAAQU,qBAAWhC,GACrB,OAAIsB,EAAMyC,OACN,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACC3C,EAAMzB,KAAI,SAACD,EAAMsE,GAAP,OACP,oCACG,kBAAC,EAAD,iBACItE,EADJ,CAEAS,IAAKT,EAAKL,MAGT2E,EAAI5C,EAAMyC,OAAS,GAAK,kBAACI,EAAA,EAAD,YAMjC,MCpBI,SAASC,IAAY,IAAD,EACMnC,EAAc,IADpB,mBACxBT,EADwB,KACjBU,EADiB,KACHC,EADG,KAEzBnB,EAAWgB,qBAAW9B,GAE5B,OACI,kBAAC8D,EAAA,EAAD,CAAO1B,MAAO,CAACI,OAAQ,SAAU2B,QAAS,WACxC,0BACEjC,SAAU,SAAArB,GACNA,EAAEsB,iBACFrB,EAAS,CAAC1B,KAAM,MAAOG,KAAM+B,IAC7BW,MAGJ,kBAACM,EAAA,EAAD,CACAjB,MAAOA,EACPmB,SAAUT,EACVQ,OAAO,SACP4B,MAAM,eACN1B,WAAS,M,uCCbN,SAAS2B,IACpB,OACG,kBAACP,EAAA,EAAD,CACA1B,MAAO,CACH+B,QAAS,EACT3B,OAAQ,EACRU,OAAQ,QACRoB,gBAAiB,WAErBC,UAAW,GAEP,kBAACC,EAAA,EAAD,CAAQC,MAAM,UAAUC,SAAS,SAAStC,MAAO,CAACc,OAAQ,SACrD,kBAACyB,EAAA,EAAD,KACQ,kBAACC,EAAA,EAAD,CAAYH,MAAM,WAAlB,sBAKb,kBAACI,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAQ,SAAS3C,MAAO,CAAC4C,UAAW,SACpD,kBAACH,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGC,GAAI,GAC3B,kBAACnF,EAAD,KACE,kBAACiE,EAAD,MACA,kBAAC,EAAD,UCzBDmB,MAJf,WACE,OAAO,kBAAChB,EAAD,OCOWiB,QACW,cAA7B7E,OAAO8E,SAASC,UAEe,UAA7B/E,OAAO8E,SAASC,UAEhB/E,OAAO8E,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.418ee391.chunk.js","sourcesContent":["import {useState, useEffect} from \"react\";\n\nfunction useLocalStorageState(key, defaultVal){\n\n    const [state, setState] = useState(() => {\n        let val;\n        try {\n        val = JSON.parse(window.localStorage.getItem(key) || String(defaultVal))\n        }\n        catch (e){\n        val = defaultVal;\n        }\n        return val\n    }\n    );\n    useEffect(() => {\n        window.localStorage.setItem(key, JSON.stringify(state))\n    }, [state])\n    \n    return [state, setState]\n}\nexport default useLocalStorageState;","import uuid from \"uuid/v4\"\nconst reducer = (state, action) => {\n    switch(action.type){\n          default:\n                return state;\n        case \"ADD\":\n            return [...state, {id: uuid(), task: action.task, completed: false}]\n        case \"REMOVE\":\n            return  state.filter(todo => todo.id !== action.id)\n        case \"TOGGLE\":\n            return state.map(todo => todo.id === action.id ? \n                {...todo, completed: !todo.completed} : todo);\n        case \"EDIT\":\n            return state.map(todo => \n                todo.id === action.id ? {...todo, task: action.newTask} : todo); \n        }  \n}\nexport default reducer","import React, {createContext} from \"react\";\nimport {useLocalStorageReducer} from \"../hooks/useLocalStorageReducer\";\nimport todoReducer from \"../reducer/todo.reducer.js\"\n\nconst defaultTodos = [\n    {id: 1, task: \"Wash the clothes\", completed: false},\n    {id: 2, task: \"Iron the clothes\", completed: true},\n]\n\n\n\n\nexport const TodosContext = createContext();\nexport const DispatchContext = createContext();\n\nexport function TodosProvider (props){\n const [todos, dispatch] = useLocalStorageReducer(\n     \"todos\", defaultTodos, todoReducer\n )\n    return (\n        <TodosContext.Provider value={todos}>\n          <DispatchContext.Provider value={dispatch}>      \n            {props.children}\n          </DispatchContext.Provider>\n        </TodosContext.Provider>\n    )\n}","import {useReducer, useEffect} from \"react\";\n\nfunction useLocalStorageReducer(key, defaultVal, reducer){\n\n    const [state, dispatch] = useReducer(reducer, defaultVal, () => {\n        let val;\n        try {\n        val = JSON.parse(window.localStorage.getItem(key) || String(defaultVal))\n        }\n        catch (e){\n        val = defaultVal;\n        }\n        return val\n    }\n    );\n\n    useEffect(() => {\n        window.localStorage.setItem(key, JSON.stringify(state))\n    }, [state])\n    \n    return [state, dispatch]\n}\nexport {useLocalStorageReducer};","import {useState} from \"react\";\nexport default initialVal => {\n    const [value, setValue] = useState(initialVal);\n    const handleChange = e => {\n        setValue(e.target.value);\n    }\n    const reset = () => {\n        setValue(\"\");\n    }\n    return [value, handleChange, reset];\n}","import React, {useContext} from \"react\";\nimport useInputState from \"./hooks/useInputState\"\nimport TextField from \"@material-ui/core/TextField\";\nimport {DispatchContext} from \"./context/todos.context\";\n\nfunction EditTodoForm({task, id, toggle}){\n    const dispatch = useContext(DispatchContext);\n    const [value, handleChange, reset] = useInputState(task)\nreturn (\n      <form onSubmit={e => {\n          e.preventDefault();\n          dispatch({type: \"EDIT\", id: id, newTask: value})\n          reset();\n          toggle();\n      }}\n      style={{marginLeft: \"1rem\", width: \"100%\"}}\n      >\n      <TextField\n      margin=\"normal\"\n      value={value}\n      onChange={handleChange}\n      fullWidth\n      autoFocus\n      />\n    </form>\n)\n}\nexport default EditTodoForm;","import {useState} from \"react\";\nfunction useToggle(initialVal = false){\n    const [state, setState] = useState(initialVal);\n    const toggle = () => {\n        setState(!state);\n    }\n    return [state, toggle]\n}\nexport default useToggle;","import React, {useContext, memo} from 'react'\nimport EditTodoForm from \"./EditTodoForm\"\nimport useToggleState from \"./hooks/useToggleState\"\nimport ListItem from \"@material-ui/core/ListItem\"\nimport ListItemText from \"@material-ui/core/ListItemText\"\nimport Checkbox from \"@material-ui/core/CheckBox\"\nimport IconButton from \"@material-ui/core/IconButton\"\nimport DeleteIcon from \"@material-ui/icons/Delete\"\nimport EditIcon from \"@material-ui/icons/Edit\"\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\"\nimport {DispatchContext} from \"./context/todos.context\"\n\nfunction Todo({id, task, completed}) {\n    const dispatch = useContext(DispatchContext);\n    const [isEditing, toggle] = useToggleState(false)\n    return (\n        <ListItem style={{height: \"64px\"}}>\n            {isEditing ? \n            <EditTodoForm\n             id={id}\n             task={task}\n             toggle={toggle}\n             />\n            : \n            <>\n            <Checkbox \n            tabIndex={-1} \n            onClick={() => dispatch({type: \"TOGGLE\", id: id})}\n            checked={completed} />\n        <ListItemText\n        style={{textDecoration: completed ? \"line-through\" : \"none\"}}\n        >\n           {task}\n        </ListItemText>\n        <ListItemSecondaryAction>\n            <IconButton \n            aria-label=\"Delete\"\n            onClick={() => dispatch({type: \"REMOVE\", id: id})}\n            >\n                <DeleteIcon/>\n            </IconButton>\n            <IconButton aria-label=\"Edit\" onClick={toggle}\n            >\n                <EditIcon/>\n            </IconButton>\n        </ListItemSecondaryAction>\n        </>\n        }\n     </ListItem>\n    )\n}\nexport default memo(Todo)\n","import React, {useContext} from \"react\";\nimport Paper from \"@material-ui/core/Paper\"\nimport List from \"@material-ui/core/List\"\nimport Divider from \"@material-ui/core/Divider\"\nimport {TodosContext} from \"./context/todos.context\"\n\nimport Todo from \"./Todo\"\n\nfunction TodoList() {\nconst todos = useContext(TodosContext);\n    if (todos.length) return (\n        <Paper>\n            <List>\n            {todos.map((todo, i) => (\n                <>\n                   <Todo \n                   {...todo}\n                   key={todo.id}\n               \n                   />\n                   {i < todos.length - 1 && <Divider/>}\n                </>\n            ))}\n            </List>\n        </Paper>\n    )\n    return null\n}\nexport default TodoList;","import React, {useContext} from 'react';\nimport TextField from \"@material-ui/core/TextField\";\nimport Paper from \"@material-ui/core/Paper\";\nimport useInputState from \"./hooks/useInputState\"\nimport {DispatchContext} from \"./context/todos.context\"\n\nexport default function TodoForm() {\n    const [value, handleChange, reset] = useInputState(\"\")\n    const dispatch = useContext(DispatchContext);\n    \n    return (\n        <Paper style={{margin: \"1rem 0\", padding: \"0 1rem\"}}>\n          <form \n            onSubmit={e => {\n                e.preventDefault();\n                dispatch({type: \"ADD\", task: value})\n                reset()\n            }}\n                >\n            <TextField\n            value={value}\n            onChange={handleChange}\n            margin='normal'\n            label=\"Add New Todo\"\n            fullWidth\n            />\n            </form>\n        </Paper>\n    )\n}\n","import React, {useEffect} from 'react';\nimport useTodoState from \"./hooks/useTodoState\"\nimport TodoList from \"./TodoList\";\nimport TodoForm from \"./TodoForm\"\nimport Typography from \"@material-ui/core/Typography\"\nimport Paper from \"@material-ui/core/Paper\"\nimport AppBar from \"@material-ui/core/AppBar\"\nimport Toolbar from \"@material-ui/core/Toolbar\"\nimport Grid from \"@material-ui/core/Grid\"\nimport {TodosProvider} from \"./context/todos.context\"\n\nexport default function TodoApp() {\n    return (\n       <Paper\n       style={{\n           padding: 0,\n           margin: 0,\n           height: \"100vh\",\n           backgroundColor: \"#fafafa\"\n       }}\n       elevation={0}\n       >\n           <AppBar color='primary' position='static' style={{height: \"64px\"}}>\n                <Toolbar>\n                        <Typography color='inherit'>\n                            TODOS WITH HOOKS\n                        </Typography>\n                </Toolbar>\n           </AppBar>\n           <Grid container justify='center' style={{marginTop: \"1rem\"}}> \n           <Grid item xs={11} md={8} lg={4}>\n              <TodosProvider>\n                <TodoForm/>\n                <TodoList/>\n              </TodosProvider>  \n                </Grid>\n           </Grid>\n       </Paper>\n    )\n}\n","import React from 'react';\nimport './App.css';\nimport TodoApp from \"./TodoApp\";\n\nfunction App() {\n  return <TodoApp/>\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}